// Generated by CoffeeScript 1.10.0
(function() {
  var d3, defaults, styleAxis, uuid, xaxis, yaxis;

  uuid = require('uuid');

  d3 = require('d3');

  defaults = {
    neatline: true
  };

  styleAxis = function(g) {
    g.selectAll('path.domain').attr({
      fill: 'none',
      stroke: 'black'
    });
    return g.selectAll('.tick line').attr({
      stroke: '#000000'
    });
  };

  xaxis = function(ax) {
    var _y, g, k, label, labelOffset, labelSize, tickOffset, v, y;
    g = null;
    label = null;
    tickOffset = 10;
    labelSize = 10;
    labelOffset = 22;
    _y = d3.svg.axis();
    y = function() {
      g = d3.select(this).append("g").attr({
        "class": "x axis"
      });
      g.append("text").attr({
        "class": 'label'
      }).style({
        'text-anchor': "middle"
      }).text(label);
      g.call(_y);
      g.call(styleAxis);
      return y.update();
    };
    y.update = function() {
      var sz;
      sz = ax.plotArea.size();
      g.attr({
        transform: "translate(0," + sz.height + ")"
      });
      g.select('text.label').attr({
        transform: "translate(" + (sz.width / 2) + ",0)",
        'font-size': labelSize,
        dy: labelOffset
      });
      g.selectAll(".tick text").attr({
        'text-anchor': "middle",
        "font-size": 10
      });
      if (ax.grid()) {
        return g.selectAll('.tick .grid').attr({
          x1: sz.height
        });
      }
    };
    y.tickOffset = function(d) {
      if (d == null) {
        return tickOffset;
      }
      tickOffset = d;
      return y;
    };
    y.label = function(d) {
      if (d == null) {
        return label;
      }
      label = d;
      return y;
    };
    y.labelOffset = function(d) {
      if (d == null) {
        return labelOffset;
      }
      labelOffset = d;
      return y;
    };
    for (k in _y) {
      v = _y[k];
      y[k] = v;
    }
    y.scale(ax.scale.x);
    y.orient("bottom");
    return y;
  };

  yaxis = function(ax) {
    var _despined, _y, g, k, label, labelOffset, labelSize, tickOffset, v, y;
    g = null;
    label = null;
    labelSize = 10;
    labelOffset = 20;
    tickOffset = 10;
    _despined = false;
    _y = d3.svg.axis();
    y = function() {
      g = d3.select(this).append("g").attr({
        "class": "y axis"
      });
      g.append("text").attr({
        "class": 'label',
        dy: -labelOffset
      }).style({
        'text-anchor': "middle"
      }).text(label);
      if (!_despined) {
        g.call(_y).call(styleAxis);
      }
      return y.update();
    };
    y.update = function() {
      var right, rot, sz;
      sz = ax.plotArea.size();
      right = y.orient() === 'right';
      rot = 90;
      if (!right) {
        rot *= -1;
      }
      g.select('text.label').attr({
        transform: "translate(0," + (sz.height / 2) + ")rotate(" + rot + ")",
        'font-size': labelSize
      });
      g.selectAll(".tick text").attr({
        'text-anchor': "middle",
        "font-size": 10
      });
      if (ax.grid()) {
        g.selectAll('.tick .grid').attr({
          x1: sz.width
        });
      }
      if (right) {
        return g.attr({
          transform: "translate(" + sz.width + ",0)"
        });
      }
    };
    y.tickOffset = function(d) {
      if (d == null) {
        return tickOffset;
      }
      tickOffset = d;
      return y;
    };
    y.label = function(d) {
      if (d == null) {
        return label;
      }
      label = d;
      return y;
    };
    y.labelOffset = function(d) {
      if (d == null) {
        return labelOffset;
      }
      labelOffset = d;
      return y;
    };
    y.despine = function() {
      _despined = true;
      return y;
    };
    for (k in _y) {
      v = _y[k];
      y[k] = v;
    }
    y.scale(ax.scale.y);
    y.orient("left");
    return y;
  };

  module.exports = {
    x: xaxis,
    y: yaxis
  };

}).call(this);
